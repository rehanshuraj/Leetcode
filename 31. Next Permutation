class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int p=-1;
        // finding index of the pivot
        for( int i=nums.size()-2 ; i>=0 ; i--){
            if(nums[i] < nums[i+1]){
                p=i;
                break;
            }
            
        }
        // in case we didnt get pivot
        if(p==-1){
            //using inbuilt to reverse a vector/array
            reverse(nums.begin() , nums.end());
            return;
        }
        // swaping pivot index number with just greater number than pivot index number
        for( int j=nums.size()-1 ; j>p ; j--){
            if( nums[j] > nums[p]){
                swap(nums[j] , nums[p]);
                break;
            }
        }
        //reversing the numbers greater than pivot index to get smallest of that numbers
        int i=p+1,j=nums.size()-1;
        while(i<=j){
            swap(nums[i++] , nums[j--]);
        }
    }
};
